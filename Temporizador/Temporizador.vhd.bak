library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_unsigned.all;

entity Temporizador is
    port (
        clk         : in std_logic;
        start       : in std_logic;
        reset       : in std_logic;
        timer_done  : out std_logic
    );
end Temporizador;

architecture Behavioral of Temporizador is
    signal counter       : std_logic_vector(31 downto 0) := (others => '0'); -- 32-bit counter
    signal timer_active  : std_logic := '0';
    constant MAX_COUNT   : std_logic_vector(31 downto 0) := x"5F5E100"; -- Adjust to desired timer duration (e.g., 100,000,000 for a 1-second timer at 100 MHz clock)
begin

    process(clk, reset)
    begin
        if reset = '1' then
            counter <= (others => '0');
            timer_active <= '0';
            timer_done <= '0';
        elsif rising_edge(clk) then
            if start = '1' then
                timer_active <= '1';
                timer_done <= '0';
            end if;

            if timer_active = '1' then
                if counter = MAX_COUNT then
                    timer_done <= '1';
                    timer_active <= '0';
                else
                    counter <= counter + 1;
                end if;
            else
                counter <= (others => '0');
            end if;
        end if;
    end process;
end Behavioral;
